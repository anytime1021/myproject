<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
"http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
<mapper namespace="com.sboot.pro.argus.dao.BlockDAO">
	<!-- 블럭 리스트 -->
	<select id="selectBlockList">
		<choose>
			<when test="searchArea == '본사'">
				select * from blockinformation where YN='Y' 
				order by df_idNumber desc limit #{offset}, #{limit}
			</when>
			<otherwise>
				select * from blockinformation where login_area=#{searchArea} and YN='Y'
				order by df_idNumber desc limit #{offset}, #{limit}
			</otherwise>
		</choose>
	</select>
	
	<!-- 블럭 수 카운트 -->
	<select id="selectBlockCount" resultType="int">
		select count(*) from blockinformation where login_area=#{searchArea} and YN='Y'
	</select>
	
	<!-- 블럭 상세보기 -->
	<select id="selectBlockView" resultType="BlockVO">
		select * from blockinformation where df_idNumber = #{df_idNumber} and YN = 'Y'
	</select>
	
	<!-- 블럭 추가 폼 일련번호 체크 -->
	<select id="isExistIdNumber" resultType="int">
		select count(*) from blockinformation where substr(df_idNumber,1,8) = substr(#{df_idNumber},1,8) 
		and substr(df_idNumber,13,3) = substr(#{df_idNumber},13,3)
	</select>
	
	<!-- 블럭 추가 -->
	<insert id="insertBlock">
		insert into blockinformation(df_idNumber, df_pictureName, df_material, df_size, df_usage, df_form, df_manufacture, df_itemStatus, df_moveStatus, note, login_area)
		values (#{addBlockForm.df_idNumber}, #{addBlockForm.df_pictureName}, #{addBlockForm.df_material}, #{addBlockForm.df_size}, 
		#{addBlockForm.df_usage}, #{addBlockForm.df_form}, #{addBlockForm.df_manufacture}, 
		#{addBlockForm.df_itemStatus}, #{addBlockForm.df_moveStatus}, #{addBlockForm.note}, #{searchArea})
	</insert>
	
	<!-- 블럭 수정 -->
	<insert id="insertUpdateLog">
		insert into blockinformation_updatelog(df_idNumber, df_pictureName, df_material, df_size, df_usage, df_form, df_manufacture, df_itemStatus, df_moveStatus, note, login_area, YN)
		select df_idNumber, df_pictureName, df_material, df_size, df_usage, df_form, df_manufacture, df_itemStatus, df_moveStatus, note, login_area, YN from blockinformation
		where df_num = #{df_num}
	</insert>
	
	<update id="updateBlock">
		update blockinformation
		set df_idNumber = #{df_idNumber},
		df_pictureName = #{df_pictureName},
		df_material = #{df_material},
		df_size = #{df_size},
		df_usage = #{df_usage},
		df_form = #{df_form},
		df_manufacture = #{df_manufacture},
		df_itemStatus = #{df_itemStatus},
		df_moveStatus = #{df_moveStatus},
		note = #{note}
		where df_num = #{df_num}
	</update>
	
	<!-- 블럭 삭제 -->
	<update id="deleteBlock">
		update blockinformation
		set YN = 'N'
		where df_idNumber = #{df_idNumber}
	</update>
	
	<!-- 블럭 대여 -->
	<update id="updateItemStatus">
		update blockInformation
		set df_itemStatus = '대여중',
		df_moveStatus = #{df_moveStatus}
		where df_idNumber = #{df_idNumber}
	</update>
	
	<insert id="insertMoveBlockList">
		insert into blockMoveList(moveList_lender, moveList_lender_rank, moveList_recipient, moveList_recipient_area, moveList_recipient_rank, moveList_rental_date, df_itemStatus, df_idNumber, login_area, login_id, note, created_at)
		select #{moveBlock.moveList_lender}, #{moveBlock.moveList_lender_rank}, #{moveBlock.moveList_recipient}, #{moveBlock.moveList_recipient_area}, #{moveBlock.moveList_recipient_rank}, #{moveBlock.moveList_rental_date}, df_itemStatus, #{moveBlock.df_idNumber}, #{login_area}, #{login_id}, #{moveBlock.note}, #{moveBlock.created_at} from blockInformation where df_idNumber = #{moveBlock.df_idNumber};
		
		insert into approval(df_idNumber, app_branch_area, login_area)
		values(#{moveBlock.df_idNumber}, #{moveBlock.moveList_recipient_area} #{login_area})
	</insert>
	
	<!-- 대여한 블럭 수 카운트 -->
	<select id="selectRentalListCount" parameterType="String" resultType="int">
		select count(*) from blockMoveList
		where moveList_recipient_area = #{searchArea}
	</select>
	
	<!-- 대여한 블럭 리스트 -->
	<select id="selectIdNumber" parameterType="String">
		select df_idNumber from blockMoveList where moveList_recipient_area = #{searchArea} and moveList_return_date is null and YN = 'Y'
	</select>
	
	<select id="selectBlockRentalList" parameterType="list">
		select * from blockInformation where df_idNumber in
		<foreach item="id" collection="idNumber" open="(" separator="," close=")">
			#{id}
		</foreach>
		order by df_idNumber desc limit #{offset}, #{limit}
	</select>
	
	<!-- 블럭 반납 -->
	<update id="updateReturnStatus">
		update blockInformation a
		set df_itemStatus = '사용중',
		df_moveStatus = '-'
		where df_idNumber = #{df_idNumber}
	</update>
	
	<update id="updateReturnRecipient">
		update blockMoveList
		set df_itemStatus = '사용중',
		moveList_return_date = now()
		where df_idNumber = #{df_idNumber}
	</update>
	
	<!-- 블럭 이동 기록 수 카운트 -->
	<select id="selectBlockMoveListCount" resultType="int">
		select count(*) from blockMoveList where YN = 'Y'
		<if test="searchArea != '본사'">
		and (login_area = #{searchArea} or moveList_recipient_area = #{searchArea})
		</if>
	</select>
	
	<!-- 블럭 이동 기록 -->
	<select id="selectBlockMoveList" parameterType="String">
		<choose>
			<when test="searchArea == '본사'">
				select * from blockMoveList where YN = 'Y' order by moveList_rental_date desc limit #{offset}, #{limit};
			</when>
			<otherwise>
				select * from blockMoveList where (login_area = #{searchArea} or moveList_recipient_area = #{searchArea}) and YN = 'Y' 
				order by moveList_rental_date desc limit #{offset}, #{limit};
			</otherwise>
		</choose>
	</select>
	
	<!-- 블럭 검색 및 페이징 카운트 수 -->
	<sql id="searchList">
		<where>
	        <choose>
	            <when test="searchType == 'idNumber'">
	                df_idNumber LIKE CONCAT('%', #{searchQuery}, '%')
	            </when>
	            <when test="searchType == 'material'">
	                df_material LIKE CONCAT('%', #{searchQuery}, '%')
	            </when>
	            <when test="searchType == 'usage'">
	                df_usage LIKE CONCAT('%', #{searchQuery}, '%')
	            </when>
	            <when test="searchType == 'form'">
	                df_form LIKE CONCAT('%', #{searchQuery}, '%')
	            </when>
	            <when test="searchType == 'manufacture'">
	                df_manufacture LIKE CONCAT('%', #{searchQuery}, '%')
	            </when>
	            <when test="searchType == 'itemStatus'">
	                df_itemStatus LIKE CONCAT('%', #{searchQuery}, '%')
	            </when>
	            <when test="searchType == 'moveStatus'">
	                df_moveStatus LIKE CONCAT('%', #{searchQuery}, '%')
	            </when>
	            <when test="searchType == 'note'">
	                df_note LIKE CONCAT('%', #{searchQuery}, '%')
	            </when>
	            <otherwise>
	                1 = 1
	            </otherwise>
	        </choose>
	    </where>
	</sql>
	
	<sql id="aliasSearchList">
		<where>
	        <choose>
	            <when test="searchType == 'idNumber'">
	                ${alias}.df_idNumber LIKE CONCAT('%', #{searchQuery}, '%')
	            </when>
	            <when test="searchType == 'material'">
	               ${alias}.df_material LIKE CONCAT('%', #{searchQuery}, '%')
	            </when>
	            <when test="searchType == 'usage'">
	                ${alias}.df_usage LIKE CONCAT('%', #{searchQuery}, '%')
	            </when>
	            <when test="searchType == 'form'">
	                ${alias}.df_form LIKE CONCAT('%', #{searchQuery}, '%')
	            </when>
	            <when test="searchType == 'manufacture'">
	                ${alias}.df_manufacture LIKE CONCAT('%', #{searchQuery}, '%')
	            </when>
	            <when test="searchType == 'itemStatus'">
	                ${alias}.df_itemStatus LIKE CONCAT('%', #{searchQuery}, '%')
	            </when>
	            <when test="searchType == 'moveStatus'">
	                ${alias}.df_moveStatus LIKE CONCAT('%', #{searchQuery}, '%')
	            </when>
	            <when test="searchType == 'note'">
	                ${alias}.df_note LIKE CONCAT('%', #{searchQuery}, '%')
	            </when>
	            <otherwise>
	                1 = 1
	            </otherwise>
	        </choose>
	    </where>
	</sql>
	
	<!-- 검색 목록 -->
	<select id="selectSearchList" parameterType="Map">
		<choose>
			<when test="searchArea == '본사'">
				select * from blockInformation
				<include refid="searchList" />
				and YN = 'Y'
				order by df_idNumber desc limit #{offset}, #{limit}
			</when>
			<otherwise>
				select * from blockInformation
				<include refid="searchList" />
				and login_area = #{searchArea} and YN = 'Y'
				order by df_idNumber desc limit #{offset}, #{limit}
			</otherwise>
		</choose>
	</select>
	
	<!-- 검색 수 카운트 1 -->
	<select id="selectListCount" resultType="int" parameterType="Map">
	    select count(*) 
	    from blockInformation
	    <include refid="searchList" />
	    and YN = 'Y'
	    <if test="token == 'blockRentalList'">
	        and df_idNumber in
	        <foreach item="id" collection="idNumber" open="(" separator="," close=")">
	            #{id}
	        </foreach>
    	</if>
    	<if test="token != 'blockRentalList' and searchArea != '본사' and token != 'blockTotalList'">
    		and login_area = #{searchArea}
    	</if>
    	<if test="token == 'blockTotalList'">
    		<if test="searchArea != '본사'">
    			and login_area not like concat('%',#{searchArea},'%')
    		</if>
    	</if>
	</select>
	
	<!-- 검색 수 카운트 2 -->
	<select id="selectMoveListCount" resultType="int" parameterType="Map">
		select count(*) from blockInformation a inner join blockMoveList b on a.df_idNumber = b.df_idNumber
		<include refid="aliasSearchList">
			<property name="alias" value="a"/>
		</include>
		and a.YN = 'Y'
		<if test="searchArea != '본사'">
		and (a.login_area = #{searchArea} or b.moveList_recipient_area = #{searchArea})
		</if>
	</select>
	
	<!-- 검색 식별번호 찾기 1 -->
	<select id="selectIdNumberSearch" parameterType="Map">
		select a.df_idNumber from blockInformation a inner join blockMoveList b on
		a.df_idNumber = b.df_idNumber
		<include refid="aliasSearchList">
			<property name="alias" value="a"/>
		</include>
		and a.YN = 'Y'
		<if test="searchArea != '본사'">
			and (a.login_area = #{searchArea} or (b.moveList_recipient_area = #{searchArea} and b.moveList_return_date is null))
		</if>
	</select>
	
	<!-- 검색 이동 기록 -->
	<select id="selectSearchMoveList" parameterType="Map">
		select * from blockMoveList
		where YN = 'Y' and df_idNumber in 
		<foreach item="id" collection="idNumber" open="(" separator="," close=")">
			#{id}
		</foreach>
		order by moveList_rental_date desc limit #{offset}, #{limit};
	</select>
	
	<!-- 검색 식별번호 찾기 2-->
	<select id="selectRentalListId" parameterType="Map">
		select df_idNumber from blockMoveList where YN = 'Y' 
			<if test="searchArea != '본사'">
				and moveList_recipient_area = #{searchArea} and moveList_return_date is null
			</if>
	</select>
	
	<!-- 검색 대여 기록 -->
	<select id="selectSearchRentalList" parameterType="Map">
		select * from blockInformation
		<include refid="searchList" />
		and YN = 'Y' and df_idNumber in
		<foreach item="id" collection="idNumber" open="(" separator="," close=")">
			#{id}
		</foreach>
		order by df_idNumber desc limit #{offset}, #{limit}
	</select>
	
	<!-- 전체 블럭 보기 수 카운트 -->
	<select id="selectBlockTotalCount" parameterType="String" resultType="int">
		select count(*) from blockInformation where YN = 'Y'
		<if test="searchArea != '본사'">
			and login_area not like concat('%',#{searchArea},'%')
		</if>
	</select>
	
	<!-- 전체 블럭 리스트 -->
	<select id="selectBlockTotalList" parameterType="Map">
		select * from blockInformation where YN = 'Y'
		<if test="searchArea != '본사'">
			and login_area not like concat('%',#{searchArea},'%')
		</if>
		order by df_idNumber desc limit #{offset}, #{limit}
	</select>
	
	<!-- 전체 블럭 리스트 검색 수 카운트 -->
	<select id="selectSearchTotalList" parameterType="Map">
		select * from blockInformation
		<include refid="searchList" />
		and YN = 'Y'
		<if test="searchArea != '본사'">
			and login_area not like concat('%',#{searchArea},'%')
		</if>
	</select>
	
	<!-- 승인 대기 수 카운트 -->
	<select id="selectApprovalCount" parameterType="String" resultType="int">
		select count(*) from approval
		<if test="searchArea != '본사'">
			where login_area = #{searchArea}
		</if>
	</select>
	
	<!-- 승인 대기 리스트 -->
	<select id="selectApprovalList" parameterType="Map">
		select * from approval
		<if test="searchArea != '본사'">
			where login_area = #{searchArea} or app_branch_area = #{searchArea}
		</if>
	</select>
	
	<!-- 이동 보고서 상세보기 -->
	<select id="selectBlockApprovalView" parameterType="String">
		select * from blockMoveList where df_idNumber = #{df_idNumber} and moveList_return_date is null
	</select>
	
	<!-- 이동 승인 -->
	<update id="updateApproval" parameterType="Map">
		update Approval
		<if test="searchArea != '본사'">
			set app_branch_status = '승인'
		</if>
		<if test="searchArea = '본사'">
			set app_head_status = '승인'
		</if>
		where df_idNumber = #{df_idNumber}
	</update>
</mapper>