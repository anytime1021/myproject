<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
"http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
<mapper namespace="com.sboot.pro.argus.dao.SowDAO">
	<!-- sow 일일 추가 (정보저장) - 게시판 없을 시 추가 -->
	<insert id="insertSowDailyWorkLogList" parameterType="sowVO">
		<foreach collection="sowDailyWorkLogList" item="item">
			insert into sowDailyWorkLog(sowDWL_name, sowDWL_work_name, sowDWL_shift, sowDWL_hours, sowDWL_overtime, work_date, login_area, emp_num)
			values (#{item.sowDWL_name}, #{item.sowDWL_work_name}, #{item.sowDWL_shift}, #{item.sowDWL_hours}, #{item.sowDWL_overtime}, #{work_date}, #{searchArea}, #{item.emp_num});
		</foreach>
	</insert>
	
	<insert id="insertBusinessTrip" parameterType="Map">
		<foreach collection="sowBusinessTrip" item="item">
			insert into business_trip(sowDWL_name, sowDWL_work_name, sowDWL_shift, sowDWL_hours, sowDWL_overtime, work_date, login_area, bt_inout, emp_num)
			values (#{item.sowDWL_name}, #{item.sowDWL_work_name}, #{item.sowDWL_shift}, #{item.sowDWL_hours}, #{item.sowDWL_overtime}, #{work_date}, #{searchArea}, #{item.bt_inout}, #{item.emp_num});
		</foreach>
	</insert>
	
	<!-- sow 일일 추가 폼 (작업목록 가져오기)-->
	<select id="selectWorkName" parameterType="String" resultType="sowVO">
		select fmonth_name from followingMonth where login_area = #{searchArea} and YN = 'Y'
	</select>
	
	<!-- 직원 목록 -->
	<select id="selectEmployeeList" parameterType="String" resultType="sowVO">
		select * from employee where login_area = #{searchArea} and YN = 'Y'
	</select>
	
	<!-- 직원 등록(정보저장) -->	
	<insert id="insertEmployee" parameterType="String">
		insert into employee(emp_name, emp_position, login_area) values (#{emp_name}, #{emp_position}, #{searchArea});
	</insert>
	
	<!-- 직원 수정 -->
	<update id="updateEmployee" parameterType="sowVO">
		update employee
		set emp_name = #{emp_name},
		emp_position = #{emp_position}
		where emp_num = #{dummyInt} and YN = 'Y'
	</update>
	
	<!-- 직원 삭제 -->
	<update id="deleteEmployee" parameterType="int">
		update employee
		set YN = 'N'
		where emp_num = #{dummyInt} and YN = 'Y'
	</update>
	
	<!-- 퇴사자 -->
	<update id="updateResignationList" parameterType="Map">
		<foreach collection="resignationList" item="item" separator=";">
			update employee
			set YN = 'N',
			emp_resignation_date = #{work_date}
			where emp_num = #{item.emp_num} and YN = 'Y'
		</foreach>
	</update>
	
	<!-- sow 일일 보기 -->
	<select id="selectViewList" parameterType="Map" resultType="sowVO">
		select * from sowdailyworklog a inner join 
			(select sum(sowDWL_overtime) as dummyInt, emp_num from sowdailyworklog where login_area = #{searchArea} and work_date between #{start_date} and #{work_date} and YN = 'Y' group by emp_num) b
			on a.emp_num = b.emp_num where login_area = #{searchArea} and work_date = #{work_date} and YN = 'Y'
	</select>
	
	<select id="selectViewList_removeResi" parameterType="Map">
		select * from sowdailyworklog where login_area = #{searchArea} and work_date = #{work_date} and YN = 'Y' and sowDWL_shift not in ('퇴사')
	</select>
	
	<!-- sow 주야구분 추가시간 계산 -->
	<select id="selectDayNightOvertime" parameterType="Map">
<!--	SELECT-->
<!--    	CASE -->
<!--	        WHEN sowDWL_shift = '주' THEN '주'-->
<!--	        WHEN sowDWL_shift = '야' AND use_overtime = 0 THEN '야'-->
<!--	        WHEN sowDWL_shift = '야' AND use_overtime = 1 THEN '야간추가'-->
<!--	    END AS shift_type,-->
<!--	    <foreach collection="workNameList" item="item" index="index" separator=",">-->
<!--	    SUM(CASE WHEN sowDWL_work_name = #{item.fmonth_name} THEN time_value ELSE 0 END) AS overtime${index}-->
<!--	    </foreach>-->
<!--	    ,SUM(time_value) AS overtime_sum FROM (-->
<!--		    SELECT sowDWL_shift, sowDWL_work_name, sowDWL_hours AS time_value, login_area, work_date, 0 AS use_overtime-->
<!--		    FROM sowdailyworklog WHERE sowDWL_shift = '야'-->
		
<!--		    UNION ALL-->
		  
<!--		    SELECT sowDWL_shift, sowDWL_work_name, sowDWL_overtime AS time_value, login_area, work_date, 1 AS use_overtime-->
<!--		    FROM sowdailyworklog WHERE sowDWL_shift = '야'-->

<!--		    UNION ALL-->
			
<!--			SELECT sowDWL_shift, sowDWL_work_name, sowDWL_overtime AS time_value, login_area, work_date, 0 AS use_overtime-->
<!--		    FROM sowdailyworklog WHERE sowDWL_shift = '주'-->
<!--			) AS merged-->
<!--		WHERE login_area = #{searchArea} -->
<!--		AND work_date BETWEEN #{start_date} AND #{work_date}-->
<!--		GROUP BY shift_type-->
<!--		ORDER BY FIELD(shift_type, '주', '야', '야간추가')-->


<!--		select distinct a.fmonth_name, ifnull(sum(b.sowDWL_overtime), 0) as weeklyShiftAdditional, ifnull(sum(c.sowDWL_hours), 0) as nightShift, ifnull(sum(c.sowDWL_overtime), 0) as nightShiftAdditional-->
<!--    	from followingmonth a left outer join (select sowDWL_work_name, sowDWL_overtime, work_date from sowdailyworklog where sowDWL_shift = '주' and YN = 'Y') b ON a.fmonth_name = b.sowDWL_work_name and b.work_date between #{start_date} and #{work_date}-->
<!--		left outer join (select sowDWL_work_name, sowDWL_overtime, sowDWL_hours, work_date from sowdailyworklog where sowDWL_shift = '야' and YN = 'Y') c on a.fmonth_name = c.sowDWL_work_name and c.work_date between #{start_date} and #{work_date}-->
<!--		where a.login_area = #{searchArea} and YN = 'Y' group by a.fmonth_name-->
<!--		union all-->
<!--		select distinct '합계' as fmonth_name, ifnull(sum(b.sowDWL_overtime),0) as weeklyShiftAdditional, ifnull(sum(c.sowDWL_hours),0) as nightShift, ifnull(sum(c.sowDWL_overtime),0) as nightShiftAdditional-->
<!--		from followingmonth a left outer join (select distinct sowDWL_work_name, sowDWL_overtime, work_date from sowdailyworklog where sowDWL_shift='주' and YN = 'Y') b on a.fmonth_name = b.sowDWL_work_name and b.work_date between #{start_date} and #{work_date}-->
<!--		left outer join (select distinct sowDWL_work_name, sowDWL_overtime, sowDWL_hours, work_date from sowdailyworklog where sowDWL_shift='야' and YN = 'Y') c on a.fmonth_name = c.sowDWL_work_name and c.work_date between #{start_date} and #{work_date}-->
<!--		where login_area=#{searchArea} and YN = 'Y'-->
		select
			a.fmonth_name,
			ifnull(b.total_overtime, 0) as weeklyShiftAdditional,
			ifnull(c.total_hours, 0) as nightShift,
			ifnull(c.total_overtime, 0) as nightShiftAdditional
		from followingmonth a
			left join (
				select sowDWL_work_name, sum(sowDWL_overtime) as total_overtime
				from sowdailyworklog
				where sowDWL_shift = '주' and YN = 'Y' and work_date between #{start_date} and #{work_date}
				group by sowDWL_work_name
			) b on a.fmonth_name = b.sowDWL_work_name
			left join (
				select sowDWL_work_name, sum(sowDWL_hours) as total_hours,	sum(sowDWL_overtime) as total_overtime
				from sowdailyworklog
				where sowDWL_shift = '야' and YN = 'Y' and work_date between #{start_date} and #{work_date}
				group by sowDWL_work_name
			) c on a.fmonth_name = c.sowDWL_work_name
				where a.login_area = #{searchArea}
		union all
		select
		'합계' as fmonth_name,
			ifnull(sum(b.total_overtime), 0) as weeklyShiftAdditional,
			ifnull(sum(c.total_hours), 0) as nightShift,
			ifnull(sum(c.total_overtime), 0) as nightShiftAdditional
			from followingmonth a
				left join (
					select sowDWL_work_name, sum(sowDWL_overtime) as total_overtime
					from sowdailyworklog
					where sowDWL_shift = '주' and YN = 'Y' and work_date between #{start_date} and #{work_date}
					group by sowDWL_work_name
			) b on a.fmonth_name = b.sowDWL_work_name
				left join (
					select sowDWL_work_name, sum(sowDWL_hours) as total_hours, sum(sowDWL_overtime) as total_overtime
					from sowdailyworklog
					where sowDWL_shift = '야' and YN = 'Y' and work_date between #{start_date} and #{work_date}
					group by sowDWL_work_name
			) c on a.fmonth_name = c.sowDWL_work_name
			where a.login_area = #{searchArea};
	</select>
	
	<select id="selectShiftType" parameterType="String">
		select sowDWL_name, sowDWL_shift from sowdailyworklog where login_area = #{searchArea} and work_date = #{work_date} and sowDWL_shift not in ('주', '야') and YN = 'Y'
	</select>
	
	<select id="selectBusinessTrip" parameterType="String">
		select * from business_trip where login_area = #{searchArea} and bt_inout = #{bt_inout} and work_date = #{work_date} and YN = 'Y'
	</select>
	
	<select id="countBtViewList" parameterType="String">
		select count(*) from business_trip where login_area = #{searchArea} and bt_inout = #{bt_inout} and work_date = #{work_date} and YN = 'Y'
	</select>
	
	<!-- sow 정보저장 이름있는 form만 length만큼 반복문 돌리기 위한 count -->
	<select id="countNameLength" parameterType="String" resultType="int">
		select count(*) from employee where login_area = #{searchArea} and YN = 'Y'
	</select>
	
	<select id="countBtNameLength" parameterType="String" resultType="int">
		select count(*) from business_trip_employee where login_area = #{searchArea} and bt_inout = #{bt_inout} and YN = 'Y'
	</select>
	
	<!-- sow 수정로그 -->
	<insert id="insertSowDailyWorkLogUpdateLog" parameterType="Map">
		insert into sowdailyworklog_updatelog(sowDWL_name, sowDWL_work_name, sowDWL_shift, sowDWL_hours, sowDWL_overtime, work_date, login_area, emp_num, login_id)
		select sowDWL_name, sowDWL_work_name, sowDWL_shift, sowDWL_hours, sowDWL_overtime, work_date, login_area, emp_num, #{login_id}
		from sowdailyworklog
		where login_area = #{searchArea} and work_date = #{work_date}
	</insert>
	
	<update id="sowUpdateDailyWorkLogList" parameterType="Map">
		<foreach collection="sowDailyWorkLogList" item="item" separator=";">
		update sowdailyworklog
		set sowDWL_name = #{item.sowDWL_name},
		sowDWL_work_name = #{item.sowDWL_work_name},
		sowDWL_shift = #{item.sowDWL_shift},
		sowDWL_hours = #{item.sowDWL_hours},
		sowDWL_overtime = #{item.sowDWL_overtime}
		where emp_num = #{item.emp_num} and work_date = #{work_date} and YN = 'Y'
		</foreach>
	</update>
	
	<!-- 출장자 목록 -->
	<select id="selectBtEmployeeList" parameterType="String">
		select * from business_trip_employee where login_area = #{searchArea} and bt_inout = #{bt_inout} and YN = 'Y'
	</select>
	
	<select id="countBtList" parameterType="String" resultType="int">
		select count(*) from business_trip_employee where login_area = #{searchArea} and bt_inout = #{bt_inout} and YN = 'Y'
	</select>
	
	<!-- 출장자 목록 - 출장자(출) -->
	<select id="selectSowBtOutList" parameterType="Map">
		select a.*, b.dummyInt from sowdailyworklog a inner join
			(select emp_num, sum(sowDWL_overtime) as dummyInt from sowdailyworklog a1 where login_area = #{searchArea}
				and work_date between #{start_date} and #{work_date} and YN = 'Y' group by emp_num) b
			on a.emp_num = b.emp_num where a.login_area = #{searchArea} and a.work_date = #{work_date} and a.YN = 'Y'
 			and not exists (select 1 from workrate b2 where a.sowDWL_work_name = b2.work_name)
	</select>
	
	<select id="countSowBtOutList" parameterType="Map" resultType="int">
		select count(*) from sowdailyworklog a where login_area = #{searchArea} and work_date = #{work_date} and YN = 'Y'
		and not exists (select 1 from workrate b where a.sowDWL_work_name = b.work_name);
	</select>
	
	<!-- 출장자 추가 (정보저장) -->
	<insert id="insertAddBtEmployee" parameterType="String">
		insert into business_trip_employee(emp_name, sowDWL_work_name, login_area, bt_inout)
		values(#{emp_name}, #{sowDWL_work_name}, #{searchArea}, #{bt_inout})
	</insert>
	
	<!-- 출장자 추가누계 -->
	<select id="selectBtSumOverTime" parameterType="String">
		select sum(sowDWL_overtime) as dummyInt from business_trip where login_area = #{searchArea} and YN = 'Y'
		and work_date between #{start_date} and #{work_date} and bt_inout = #{bt_inout} group by emp_num;
	</select>
	
	<!-- 출장자 수정 로그 -->
	<insert id="insertBusinessTripUpdateLog" parameterType="Map">
		insert into business_trip_updatelog(sowDWL_name, sowDWL_work_name, sowDWL_shift, sowDWL_hours, sowDWL_overtime, work_date, login_area, bt_inout, emp_num, login_id)
		select sowDWL_name, sowDWL_work_name, sowDWL_shift, sowDWL_hours, sowDWL_overtime, work_date, login_area, bt_inout, emp_num, #{login_id}
		from business_trip
		where login_area = #{searchArea} and work_date = #{work_date}
	</insert>
	
	<!-- 출장자 수정 -->
	<update id="sowUpdateBusinessTrip" parameterType="Map">
		<foreach collection="sowBusinessTrip" item="item" separator=";">
		update business_trip
		set sowDWL_name = #{item.sowDWL_name},
		sowDWL_work_name = #{item.sowDWL_work_name},
		sowDWL_shift = #{item.sowDWL_shift},
		sowDWL_hours = #{item.sowDWL_hours},
		sowDWL_overtime = #{item.sowDWL_overtime}
		where emp_num = #{item.emp_num} and work_date = #{work_date} and YN = 'Y'
		</foreach>
	</update>
	
	<!-- 추가시간 총합 return -->
	<select id="sumOvertime" parameterType="Map" resultType="int">
		select sum(sowDWL_overtime) as dummyInt from sowdailyworklog where login_area=#{searchArea} and work_date between #{start_date} and #{work_date} and YN = 'Y'
	</select>
	
	<!-- sow 삭제 -->
	<delete id="deleteSow" parameterType="Map">
		update sowdailyworklog
		set YN = 'N'
		where login_area=#{searchArea} and work_date=#{work_date};
		
		update business_trip
		set YN= 'N'
		where login_area=#{searchArea} and work_date=#{work_date}
	</delete>
	
	
	<!-- 출장자 수정 - 출장자 추가 폼 -->
	<update id="updateBtEmployee" parameterType="Map">
		update business_trip_employee
		set emp_name = #{emp_name},
		sowDWL_work_name = #{sowDWL_work_name}
		where login_area = #{login_area} and emp_num = #{dummyInt} and YN='Y'
	</update>
	
	<!-- 출장자 삭제 - 출장자 추가 폼 -->
	<delete id="deleteBtEmployee" parameterType="int">
		update business_trip_employee
		set YN='N'
		where emp_num = #{dummyInt}
	</delete>
</mapper>